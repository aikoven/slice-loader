var fs = require('fs');
var loaderUtils = require('loader-utils');

module.exports = function(source) {
  this.cacheable && this.cacheable();

  var options = loaderUtils.getOptions(this) || {};

  if (!options.node) {
    // replace with browser version if it exists
    var browserPath = this.resourcePath.replace(/\w+\.js$/, 'browser/$&');

    try {
      if (browserPath.indexOf('ModuleRegistry') === -1 &&
        fs.statSync(browserPath).isFile()) {

        this.dependency(browserPath);
        source = fs.readFileSync(browserPath).toString();

        source += '\n' + 'module.exports.Ice = Ice;';
      }
    } catch (e) {
      // ignore if file doesn't exist
    }
  }

  // replace Ice built-in module require with native
  source = source.replace(
    /(?:Ice\.)?__M\.require\(module,(\s*)\[([^\]]+)\]\)/g,
    function(match, prefix, content) {
      // remove dependencies on Network and TcpTransceiver
      content = content.replace(/"\.\.\/Ice\/(Network|TcpTransceiver)",?/g, '');

      content = content.replace(/"[^" ]+"/g, 'require($&)');
      // remove trailing comma
      content = content.replace(/,(\s+)$/, '$1');
      return prefix+'('+content+')';
    }
  );

  // replace requires for Ice 3.7
  source = source.replace(
    /(?:Ice\.)?_ModuleRegistry\.require\(module,(\s*)\[([^\]]+)\]\)/g,
    function(match, prefix, content) {
      // remove dependencies on Network and TcpTransceiver
      content = content.replace(/"\.\.\/Ice\/(Class|Network|TcpTransceiver)",?/g, '');

      content = content.replace(/"[^" ]+"/g, 'require($&)');
      // remove trailing comma
      content = content.replace(/,(\s+)$/, '$1');
      return prefix+'('+content+')';
    }
  );

  // for auto-generated Slice modules comment out broken CommonJS wrapper
  if (source.indexOf('<auto-generated>') === -1)
    return source;

  var lines = source.split('\n');

  function commentLine(index) {
    lines[index] = '// ' + lines[index];
  }

  var start = lines.indexOf('(function(module, require, exports)');
  if (start === -1)
    throw new Error('Could not parse Slice module');

  commentLine(start);
  commentLine(start+1);

  var end = lines.indexOf('(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,');

  for (var i = end - 1; i < lines.length - 1; i++) {
    commentLine(i);
  }

  return lines.join('\n');
};
